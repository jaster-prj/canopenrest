// Package canopenrest provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package canopenrest

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// PostFlashParams defines parameters for PostFlash.
type PostFlashParams struct {
	// Node Node to query
	Node string `form:"node" json:"node"`

	// Version Version that will be flashed
	Version *string `form:"version,omitempty" json:"version,omitempty"`
}

// GetNMTParams defines parameters for GetNMT.
type GetNMTParams struct {
	// Node Node to query
	Node string `form:"node" json:"node"`
}

// PostNMTJSONBody defines parameters for PostNMT.
type PostNMTJSONBody = string

// PostNMTParams defines parameters for PostNMT.
type PostNMTParams struct {
	// Node Node to query
	Node string `form:"node" json:"node"`
}

// PostNodeParams defines parameters for PostNode.
type PostNodeParams struct {
	// Node Node to query
	Node string `form:"node" json:"node"`
}

// GetSDOParams defines parameters for GetSDO.
type GetSDOParams struct {
	// Node Node to query
	Node string `form:"node" json:"node"`

	// Index Index to query
	Index string `form:"index" json:"index"`

	// Subindex Subindex to query
	Subindex *int `form:"subindex,omitempty" json:"subindex,omitempty"`
}

// PostSDOTextBody defines parameters for PostSDO.
type PostSDOTextBody = string

// PostSDOParams defines parameters for PostSDO.
type PostSDOParams struct {
	// Node Node to query
	Node string `form:"node" json:"node"`

	// Index Index to query
	Index string `form:"index" json:"index"`

	// Subindex Subindex to query
	Subindex *int `form:"subindex,omitempty" json:"subindex,omitempty"`
}

// PostNMTJSONRequestBody defines body for PostNMT for application/json ContentType.
type PostNMTJSONRequestBody = PostNMTJSONBody

// PostSDOTextRequestBody defines body for PostSDO for text/plain ContentType.
type PostSDOTextRequestBody = PostSDOTextBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Flash updates node with binary
	// (POST /flash)
	PostFlash(ctx echo.Context, params PostFlashParams) error
	// Reads nmt state from node
	// (GET /nmt)
	GetNMT(ctx echo.Context, params GetNMTParams) error
	// Writes nmt state to node
	// (POST /nmt)
	PostNMT(ctx echo.Context, params PostNMTParams) error
	// Creates node with eds
	// (POST /node)
	PostNode(ctx echo.Context, params PostNodeParams) error
	// Reads sdo data from node
	// (GET /sdo)
	GetSDO(ctx echo.Context, params GetSDOParams) error
	// Writes sdo data to node
	// (POST /sdo)
	PostSDO(ctx echo.Context, params PostSDOParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostFlash converts echo context to params.
func (w *ServerInterfaceWrapper) PostFlash(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostFlashParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// ------------- Optional query parameter "version" -------------

	err = runtime.BindQueryParameter("form", true, false, "version", ctx.QueryParams(), &params.Version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostFlash(ctx, params)
	return err
}

// GetNMT converts echo context to params.
func (w *ServerInterfaceWrapper) GetNMT(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNMTParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNMT(ctx, params)
	return err
}

// PostNMT converts echo context to params.
func (w *ServerInterfaceWrapper) PostNMT(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNMTParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostNMT(ctx, params)
	return err
}

// PostNode converts echo context to params.
func (w *ServerInterfaceWrapper) PostNode(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNodeParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostNode(ctx, params)
	return err
}

// GetSDO converts echo context to params.
func (w *ServerInterfaceWrapper) GetSDO(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSDOParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// ------------- Required query parameter "index" -------------

	err = runtime.BindQueryParameter("form", true, true, "index", ctx.QueryParams(), &params.Index)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter index: %s", err))
	}

	// ------------- Optional query parameter "subindex" -------------

	err = runtime.BindQueryParameter("form", true, false, "subindex", ctx.QueryParams(), &params.Subindex)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subindex: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSDO(ctx, params)
	return err
}

// PostSDO converts echo context to params.
func (w *ServerInterfaceWrapper) PostSDO(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostSDOParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// ------------- Required query parameter "index" -------------

	err = runtime.BindQueryParameter("form", true, true, "index", ctx.QueryParams(), &params.Index)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter index: %s", err))
	}

	// ------------- Optional query parameter "subindex" -------------

	err = runtime.BindQueryParameter("form", true, false, "subindex", ctx.QueryParams(), &params.Subindex)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subindex: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSDO(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/flash", wrapper.PostFlash)
	router.GET(baseURL+"/nmt", wrapper.GetNMT)
	router.POST(baseURL+"/nmt", wrapper.PostNMT)
	router.POST(baseURL+"/node", wrapper.PostNode)
	router.GET(baseURL+"/sdo", wrapper.GetSDO)
	router.POST(baseURL+"/sdo", wrapper.PostSDO)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXTW/bRhD9K4tBDy1KkYzbQ8pLmzpOYaC1iyhtD4YKjMkRuQa5u9kZSjYM/fdiKEup",
	"ZUlW2iZ1gJxEcedr33szu7wF66YeilsovRMsRR+pQ9tCAZJeIQvFH4JnIZ9WBIsEKuIy2iDWOyjg9cn4",
	"jRlTnNmSzNRHY51QxFKsq83cSmPGL8+Nv7yiUtigq8xvoUKhlQ8k0NqSHJNmdtgRFPAiYNmQOUpzSKCP",
	"WksjEoosm8/nKQ6rqY91dufK2c+nxydn45PRUZqnjXStFioUOz6frhKtY/Ac65pian02mGSQgFhp1eQY",
	"3XkgZ/6+LUhgRpGX+83TZ2mu0X0gh8FCAd8MrxIIKA3rLrJpi9zokwKnv/cxe6XLph9wYON8RUukLq3D",
	"eAND7IhqfFpBAb96lsFlyBGxI6HIUFxsxj3TSOLN256GMFZfrv7cQavZIIFIb3sbqYJCYk8JcNlQh1qq",
	"3AS1Y4nW1bBYJJtZfl9iYaRBMXPbtuaSzLBjqnYkXcG3L89kWRSx/Oirm5UiyQ34YQitLQdIMl8KyYgl",
	"Ena69i7k1McOBQpYA7mZZLHQLBy8ikZdjvL8IT/jviyJedq3Zs2EUv7tNuNTN8PWVsa60IviBdx3naY/",
	"gGjBWomEpWAm6p25bthyTVuU85qwYuM6MSzaRNPoO3NH6X3R/ERy9subj6KYgCIU1fPPL/OL68lX31+8",
	"GL3KR99Nvv5iCweT7RTsYPuKtdDbPcJ5MJL4n9AnWJsZtj1tULgP8RV7ythkkezo9j+iHdhfhxC/nTLt",
	"86fM2SHNeQBdB7Xgf8rhHgbuUzi0ny7sHN3HkTZ6mSrezuQywadL5Sc0Z3exsmZXMVzSy5V/ZLpy5U2F",
	"gvuH6/jl+VNkN3kIW0XXj1Vh1eiDljHuL+0hlfCd3bargt4sa4rvfYT8GyHrLfJastCifQLH0FZprkSu",
	"yn70FFpH2HcIfdb2/63tDz2f30PWH3eS75bpfZkPXhRnK3W++0jkIstKdDUKzfEmbduRXI0a35G+1Y+2",
	"SCwZBpvNnoGSed+19SW2jWd53HxXouJ5/jw/yH2dbLfLZPFXAAAA//8CzF5qow8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
