// Package canopenrest provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package canopenrest

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// GetFlashParams defines parameters for GetFlash.
type GetFlashParams struct {
	// Id uuid of TestOrder
	Id string `form:"id" json:"id"`
}

// PostFlashParams defines parameters for PostFlash.
type PostFlashParams struct {
	// Node Node to query
	Node string `form:"node" json:"node"`

	// Version Version that will be flashed
	Version *string `form:"version,omitempty" json:"version,omitempty"`
}

// GetNMTParams defines parameters for GetNMT.
type GetNMTParams struct {
	// Node Node to query
	Node string `form:"node" json:"node"`
}

// PostNMTJSONBody defines parameters for PostNMT.
type PostNMTJSONBody = string

// PostNMTParams defines parameters for PostNMT.
type PostNMTParams struct {
	// Node Node to query
	Node string `form:"node" json:"node"`
}

// PostNodeParams defines parameters for PostNode.
type PostNodeParams struct {
	// Node Node to query
	Node string `form:"node" json:"node"`
}

// GetSDOParams defines parameters for GetSDO.
type GetSDOParams struct {
	// Node Node to query
	Node string `form:"node" json:"node"`

	// Index Index to query
	Index string `form:"index" json:"index"`

	// Subindex Subindex to query
	Subindex *int `form:"subindex,omitempty" json:"subindex,omitempty"`
}

// PostSDOTextBody defines parameters for PostSDO.
type PostSDOTextBody = string

// PostSDOParams defines parameters for PostSDO.
type PostSDOParams struct {
	// Node Node to query
	Node string `form:"node" json:"node"`

	// Index Index to query
	Index string `form:"index" json:"index"`

	// Subindex Subindex to query
	Subindex *int `form:"subindex,omitempty" json:"subindex,omitempty"`
}

// PostNMTJSONRequestBody defines body for PostNMT for application/json ContentType.
type PostNMTJSONRequestBody = PostNMTJSONBody

// PostSDOTextRequestBody defines body for PostSDO for text/plain ContentType.
type PostSDOTextRequestBody = PostSDOTextBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets information from FlashOrder
	// (GET /flash)
	GetFlash(ctx echo.Context, params GetFlashParams) error
	// Flash updates node with binary
	// (POST /flash)
	PostFlash(ctx echo.Context, params PostFlashParams) error
	// Reads nmt state from node
	// (GET /nmt)
	GetNMT(ctx echo.Context, params GetNMTParams) error
	// Writes nmt state to node
	// (POST /nmt)
	PostNMT(ctx echo.Context, params PostNMTParams) error
	// Creates node with eds
	// (POST /node)
	PostNode(ctx echo.Context, params PostNodeParams) error
	// Reads sdo data from node
	// (GET /sdo)
	GetSDO(ctx echo.Context, params GetSDOParams) error
	// Writes sdo data to node
	// (POST /sdo)
	PostSDO(ctx echo.Context, params PostSDOParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetFlash converts echo context to params.
func (w *ServerInterfaceWrapper) GetFlash(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFlashParams
	// ------------- Required query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, true, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetFlash(ctx, params)
	return err
}

// PostFlash converts echo context to params.
func (w *ServerInterfaceWrapper) PostFlash(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostFlashParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// ------------- Optional query parameter "version" -------------

	err = runtime.BindQueryParameter("form", true, false, "version", ctx.QueryParams(), &params.Version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostFlash(ctx, params)
	return err
}

// GetNMT converts echo context to params.
func (w *ServerInterfaceWrapper) GetNMT(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNMTParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNMT(ctx, params)
	return err
}

// PostNMT converts echo context to params.
func (w *ServerInterfaceWrapper) PostNMT(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNMTParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostNMT(ctx, params)
	return err
}

// PostNode converts echo context to params.
func (w *ServerInterfaceWrapper) PostNode(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNodeParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostNode(ctx, params)
	return err
}

// GetSDO converts echo context to params.
func (w *ServerInterfaceWrapper) GetSDO(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSDOParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// ------------- Required query parameter "index" -------------

	err = runtime.BindQueryParameter("form", true, true, "index", ctx.QueryParams(), &params.Index)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter index: %s", err))
	}

	// ------------- Optional query parameter "subindex" -------------

	err = runtime.BindQueryParameter("form", true, false, "subindex", ctx.QueryParams(), &params.Subindex)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subindex: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSDO(ctx, params)
	return err
}

// PostSDO converts echo context to params.
func (w *ServerInterfaceWrapper) PostSDO(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostSDOParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// ------------- Required query parameter "index" -------------

	err = runtime.BindQueryParameter("form", true, true, "index", ctx.QueryParams(), &params.Index)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter index: %s", err))
	}

	// ------------- Optional query parameter "subindex" -------------

	err = runtime.BindQueryParameter("form", true, false, "subindex", ctx.QueryParams(), &params.Subindex)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subindex: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSDO(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/flash", wrapper.GetFlash)
	router.POST(baseURL+"/flash", wrapper.PostFlash)
	router.GET(baseURL+"/nmt", wrapper.GetNMT)
	router.POST(baseURL+"/nmt", wrapper.PostNMT)
	router.POST(baseURL+"/node", wrapper.PostNode)
	router.GET(baseURL+"/sdo", wrapper.GetSDO)
	router.POST(baseURL+"/sdo", wrapper.PostSDO)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+yY32/jRBDH/5XViAcQjp0WXsgLHL3eqRI06FLgoQrSxJ4kW9m7vt1x0qry/45mXYcm",
	"cX60R48i3VuVnZ1f38/MprkHbaYWBveQWsOYsvxJBeocBsDxDXom91NpPZONM4I6gox86nTJ2hoYwIfz",
	"0ZUakVvolNTUOqUNk8OUtZmppea5Gr0dKju5oZS9QpOp38sMmdo7EEGuUzKeJLLBgmAAb0pM56RO4z5E",
	"UDnJZc5cDpJkuVzGGE5j62bJw1Wf/HJxdn45Ou+dxv14zkUuiTK5wg+nbaCVD7/E2YxcrG0STBKIgDXn",
	"YnKGZliSUY/LgggW5HxTbz8+ifvi3ZZksNQwgO/CRxGUyHMvVSTTHP1c/ppRaOh6y94TeyVtdwXKR2rq",
	"bKHeyZ2hy8hBcO7C2UXWXAinIYbDgpich8H1puOq0pmyU3VFnltPWg4+VuTuIGrbqzOIwNHHSjvKYMCu",
	"ogh8OqcCJVu+K8XKs9NmBnU9FmNfWmm0nJ/2+y0wZEJ9WJa5TkPCyY2XXO4f+SudlMO6uU3OWdcRJoKp",
	"NrppW9MaGICQ0mNdiAZb9lIBeZYSjr3iGR0/yZypqyUr2wZsqOutwXhP3Gg6Ck7qCL5v+rZudmEWmOtM",
	"aVNWHDz7qijQ3R0HCuNMSICGuHEdgczqdphwSVVh9LwyNqNmOCfaYEBjnbjfrD8OuUvxxFa1hHXhJtGe",
	"BFy0GeWPZvwUz5HVUue5mpAKJVO2I2g7sQfBDgz9bLO7PUzblIl7nh1hsc72iqNVIzeD1PXW+JxshGK6",
	"5aTMUW8MzparTcbOHMkqfUTEczA7yMYmZHUEiSl454L7QJh5ZQpWYYAabB8o2Npsl79efRbISmQmJzf/",
	"+rp/fTv+5sfrN713/d4P42+/6pDtU5feQe18labk/bTK1aonB+VjnKkF5hVtSLiv4616otjuBfGn00H9",
	"lQu23ZLJanjNmh0zz0fIVXfr/4Ia7lFgXcIwfnIgHeoUs9kLj2eZMt+tZBPg/yvlv7yaO3QbPUfkrj27",
	"S5WVutLDRl6f2QPb1WdWZci4f7mO3g5fo7rRdtsyuj2UhRajF01jVE30MZn4B7uubxfy/89MXuInPiGf",
	"AnL0/K8QL/AMdaLZQi5kH3yFVh72PUJf2P6v2X7p/fwErD/vJt+N6Trm4Ra5RUtn81NGkqKxJRlHnhMs",
	"dbI4AdGrOb2vXF5DBAt0Gid5U044kgynWOX8z08ZuU0xn1vPnT7relz/HQAA//+RN7E54REAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
